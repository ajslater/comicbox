[project]
authors = [{ name = "AJ Slater", email = "aj@slater.net" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
]
dependencies = [
  "ansicolors~=1.1.8",
  "bidict~=0.23",
  "case-converter~=1.2",
  "confuse~=2.0",
  "comicfn2dict<1.0.0,>=0.2.4",
  "deepdiff~=8.2",
  "glom~=24.11",
  "loguru~=0.7",
  "marshmallow~=4.0.0",
  "marshmallow-union>=0.1.15.post1",
  "pycountry~=24.6",
  "python-dateutil~=2.8",
  "py7zr~=1.0.0",
  "rarfile~=4.0",
  "rich~=14.0",
  "rich-argparse~=1.7",
  "ruamel-yaml~=0.17",
  "simplejson~=3.19",
  "typing-extensions~=4.13",
  "urnparse~=0.2",
  "xmltodict~=1.0",
  "zipremove~=0.1",
]
description = "Comic book archive multi format metadata read/write/transform tool and image extractor."
keywords = [
  "comic",
  "cbz",
  "cbr",
  "cbt",
  "cb7",
  "pdf",
  "comicinfo",
  "comicbookinfo",
  "comet",
  "metroninfo",
]
license = "LGPL-3.0-only"
name = "comicbox"
readme = "README.md"
requires-python = "<4.0,>=3.10"
version = "2.0.3"

[project.urls]
News = "https://comicbox.readthedocs.io/NEWS/"
Documentation = "https://comicbox.readthedocs.io"
Source = "https://github.com/ajslater/comicbox"

[project.optional-dependencies]
pdf = ["comicbox-pdffile<1.0.0,>=0.2.5"]

[project.scripts]
comicbox = "comicbox.cli:main"

[dependency-groups]
dev = [
  "basedpyright~=1.29",
  "codespell~=2.4",
  "coverage[toml]~=7.0",
  "check-jsonschema~=0.31",
  "icecream~=2.1",
  "jsonschema[format]~=4.20",
  "mkapi~=4.4",
  "mkdocs~=1.6",
  "mkdocs-minify-plugin~=0.8",
  "pytest-cov~=7.0",
  "pytest-gitignore~=1.3",
  "radon[toml]~=6.0",
  "ruff~=0.12",
  "toml-cli~=0.7",
  "ty>=0.0.1a19",
  "types-python-dateutil~=2.8",
  "types-xmltodict~=0.15",
  "vulture~=2.1",
  "xmlschema~=4.0",
]

[build-system]
requires = ["uv_build~=0.8.7"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ""
source-include = [
  ".circlci/**",
  ".*ignore",
  ".shellcheckrc",
  "bin/**",
  "eslint.config.js",
  "frontend/**",
  "Makefile",
  "package-lock.json",
  "package.json",
  "tests/**",
  "uv.lock",
  "vulture_ignorelist.py",
]
source-exclude = ["**/*\\~", "**/.DS_Store"]
wheel-exclude = []

[tool.basedpyright]
exclude = [
  "**/.*",
  "**/__pycache__",
  "**/node_modules",
  "comicbox/zipfile_remove",
  "dist",
  "test-results",
  "typings",
  "vulture_ignorelist.py",
]
pythonVersion = "3.10"
failOnWarnings = false
reportAny = false
reportExplicitAny = false
reportImportCycles = true
reportIncompatibleUnannotatedOverride = true
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateUsage = false # ruff does this
reportUnannotatedClassAttribute = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUntypedBaseClass = false # Meta inheritance
reportUnusedCallResult = false
reportUnusedParameter = false # ruff does this

[tool.codespell]
builtin = 'clear,rare,code'
check-hidden = true
ignore-words-list = 'thead,ro,jupyter,coverd'
skip = ".*,*~,./.venv/*,./dist,./node_modules/*,./package.json,./package-lock.json,./uv.lock,./test-results,./tests/test_files/*,comicbox/zipfile_remove"

[tool.coverage.run]
source = ["comicbox"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  "*/.*",
  "*__pycache__*",
  "comicbox/zipfile_remove",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
  "vulture_ignorelist.py",
  "zipfile_remove/*",
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"
pythonpath = ["."]

[tool.radon]
exclude = "*~,.*,.*/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*,comicbox/zipfile_remove/*"

[tool.ruff]
builtins = ["ic"]
extend-exclude = [
  "**/.*",
  "**/__pycache__",
  "dist",
  "test-results",
  "typings",
  "comicbox/zipfile_remove",
  "vulture_ignorelist.py",
]
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "BLE001", # catch bare exception
  "COM812", # missing trailing comma
  "COM819", # prohibit trailing comma
  "D203",   # blank line before class docstring
  "D206",   # formatted
  "D212",   # first line multi line docstring.
  "E111",   # formatted
  "E114",   # formatted
  "E117",   # over-indented
  "E501",   # 88 char line
  # "FIX002",  # TODO
  # "FIX003",  # XXX
  "ISC001",  # formatted
  "PERF203", # try block in loop
  "S101",    # assert
  "W191",    # formatted
]
extend-select = [
  # "AIR",
  "ERA",
  # "FAST",
  # ########
  # flake8 #
  # ########
  "YTT",
  # "ANN",
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  # "CPY",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FIX",
  "FA",
  "INT",
  "ISC",
  "ICN",
  "LOG",
  # "G",
  "INP",
  "PIE",
  "PYI",
  "T20",
  "PT",
  # "Q", Formatted
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "SLOT",
  "TID",
  # "TD",
  "TC",
  "ARG",
  "PTH",
  # ############
  # end flake8 #
  # ############
  "FLY",
  "I",
  "C90",
  # "NPY",
  # "PD",
  "N",
  "PERF",
  "E",
  "W",
  # "DOC",
  "D",
  "F",
  "PGH",
  "PLE",
  "PLR",
  "PLW",
  "UP",
  "FURB",
  "RUF",
  "TRY",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.per-file-ignores]
"comicbox/run.py" = ["T201", "T203"]
"tests/test_import.py" = ["DTZ001"]
"tests/validate/cli.py" = ["T201"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ty.environment]
python = "./.venv"
python-version = "3.10"

[tool.ty.src]
exclude = [
  "**/.*",
  "**/__pycache__",
  "**/node_modules",
  "dist",
  "test-results",
  "typings",
  "vulture_ignorelist.py",
]

[tool.vulture]
exclude = [
  "*/.*",
  "*/__pycache__*",
  "*/node_modules*",
  "comicbox/zipfile_remove/",
  "dist/",
  "test-results/",
  "typings/",
  "comicbox/zipfile_remove/",
]
min_confidence = 61
sort_by_size = true
