[project]
name = "comicbox"
version = "2.0.0a3"
description = "Comic book archive multi format metadata read/write/transform tool and image extractor."
requires-python = "<4.0,>=3.10"
authors = [{ name = "AJ Slater", email = "aj@slater.net" }]
license = { text = "LGPL-3.0-only" }
dependencies = [
  "ansicolors<2.0.0,>=1.1.8",
  "bidict<1.0.0,>=0.23.0",
  "confuse<3.0.0,>=2.0.0",
  "comicfn2dict<1.0.0,>=0.2.4",
  "deepdiff<9.0.0,>=8.2.0",
  "glom>=24.11.0",
  "marshmallow<5.0.0,>=4.0.0",
  "marshmallow-union<1.0.0.0,>=0.1.15.post1",
  "mergedeep<2.0.0,>=1.3.4",
  "pycountry<25.0.0,>=24.6.1",
  "python-dateutil<3.0.0,>=2.8.2",
  "py7zr<2.0.0,>=1.0.0rc2",
  "rarfile<5.0,>=4.0",
  "rich<15.0,>=14.0.0",
  "rich-argparse<2.0.0,>=1.7.0",
  "ruamel-yaml<0.19.00,>=0.17.32",
  "simplejson<4.0.0,>=3.19.1",
  "stringcase<2.0.0,>=1.2.0",
  "urnparse<1.0.0,>=0.2.0",
  "xmltodict<1.0.0,>=0.14.0",
  "typing-extensions>=4.13.2",
]
readme = "README.md"
keywords = [
  "comic",
  "cbz",
  "cbr",
  "cbt",
  "cb7",
  "pdf",
  "comicinfo",
  "comicbookinfo",
  "comet",
  "metroninfo",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
]

[project.urls]
homepage = "https://github.com/ajslater/comicbox"
repository = "https://github.com/ajslater/comicbox"
documentation = "https://github.com/ajslater/comicbox"

[project.optional-dependencies]
pdf = ["comicbox-pdffile<1.0.0,>=0.2.3"]

[project.scripts]
comicbox = "comicbox.cli:main"

[dependency-groups]
dev = [
  "basedpyright~=1.29.1",
  "codespell<3.0.0,>=2.1.0",
  "coverage[toml]<8.0,>=7.0",
  "check-jsonschema<1.0.0,>=0.31.0",
  "jsonschema[format]<5.0.0,>=4.20.1",
  "hatchling<2.0.0,>=1.27.0",
  "pytest-cov<7.0,>=6.0",
  "pytest-gitignore<2.0,>=1.3",
  "radon[toml]<7.0.0,>=6.0.1",
  "ruff<1.0.0,>=0.9.9",
  "toml-cli<1.0.0,>=0.7.0",
  "types-python-dateutil<3.0.0.0,>=2.8.19.13",
  "vulture<3.0,>=2.1",
  "xmlschema<5.0.0,>=4.0.0",
  "icecream>=2.1.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.basedpyright]
exclude = [
  "**/.*",
  "**/__pycache__",
  "**/node_modules",
  "comicbox/zipfile_remove",
  "dist",
  "test-results",
  "typings",
  "vulture_whitelist.py",
]
pythonVersion = "3.10"
failOnWarnings = false
reportAny = false
reportExplicitAny = false
reportImportCycles = true
reportIncompatibleUnannotatedOverride = true
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateUsage = false # ruff does this
reportUnannotatedClassAttribute = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUntypedBaseClass = false # Meta inheritance
reportUnusedCallResult = false
reportUnusedParameter = false # ruff does this

[tool.codespell]
skip = ".*,*~,./dist,./node_modules,./package.json,./package-lock.json,./uv.lock,./test-results,./tests/test_files/*,comicbox/zipfile_remove"

builtin = 'clear,rare,code'
check-hidden = true
ignore-words-list = 'thead,ro,jupyter,coverd'

[tool.coverage.run]
source = ["comicbox"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  "*/.*",
  "*__pycache__*",
  "comicbox/zipfile_remove",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.hatch.build.targets.sdist]
include = ['comicbox', 'tests', 'NEWS.md']

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"
pythonpath = ["."]

[tool.radon]
exclude = "*~,.*,.*/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*,comicbox/zipfile_remove/*"

[tool.ruff]
extend-exclude = [
  "**/.*",
  "**/__pycache__",
  "dist",
  "test-results",
  "typings",
  "comicbox/zipfile_remove",
]
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "BLE001", # catch bare exception
  "COM812", # missing trailing comma
  "COM819", # prohibit trailing comma
  "D203",   # blank line before class docstring
  "D206",   # formatted
  "D212",   # first line multi line docstring.
  "E111",   # formatted
  "E114",   # formatted
  "E117",   # over-indented
  "E501",   # 88 char line
  # "FIX002",  # TODO
  # "FIX003",  # XXX
  "ISC001",  # formatted
  "PERF203", # try block in loop
  "S101",    # assert
  "W191",    # formatted
]
extend-select = [
  "A",
  # "AIR",
  # "ANN",
  "ARG",
  "ASYNC",
  "B",
  "B9",
  "BLE",
  "C",
  "C4",
  "C90",
  "COM",
  # "CPY",
  "D",
  "DJ",
  # "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  # "FAST",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  # "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  # "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  # "Q", Formatted
  "N",
  # NPY,
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TCH",
  # "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.per-file-ignores]
"comicbox/run.py" = ["T201", "T203"]
"tests/*" = ["FBT001", "FBT002", "FBT003"]
"tests/test_import.py" = ["DTZ001"]
"tests/validate/cli.py" = ["T201"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
min_confidence = 61
sort_by_size = true
exclude = [
  "*/.*",
  "*/__pycache__*",
  "*/node_modules*",
  "comicbox/zipfile_remove/",
  "dist/",
  "test-results/",
  "typings/",
]
